a. Patient table
CREATE TABLE Patient (
    patient_id INT AUTO_INCREMENT PRIMARY KEY,          -- Unique patient identifier
    first_name VARCHAR(100) NOT NULL,                   -- First name of the patient
    last_name VARCHAR(100) NOT NULL,                    -- Last name of the patient
    date_of_birth DATE,                                 -- Date of birth
    gender ENUM('Male', 'Female', 'Other'),             -- Gender
    email VARCHAR(150) UNIQUE,                          -- Email (unique)
    phone VARCHAR(15),                                  -- Phone number
    address TEXT,                                       -- Home address
    emergency_contact_name VARCHAR(100),                -- Emergency contact name
    emergency_contact_phone VARCHAR(15),                -- Emergency contact phone number
    blood_group VARCHAR(10),                            -- Blood type
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,     -- Timestamp when the record was created
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP -- When the record was last updated
);

b. Doctor table
CREATE TABLE Doctor (
    doctor_id INT AUTO_INCREMENT PRIMARY KEY,           -- Unique doctor identifier
    first_name VARCHAR(100) NOT NULL,                   -- First name
    last_name VARCHAR(100) NOT NULL,                    -- Last name
    specialization VARCHAR(100),                        -- Specialization (e.g., Cardiology, Orthopedics)
    email VARCHAR(150) UNIQUE,                          -- Email (unique)
    phone VARCHAR(15),                                  -- Phone number
    department_id INT,                                  -- Foreign key to Department table
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,     -- Timestamp when the record was created
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP, -- Last updated time
    FOREIGN KEY (department_id) REFERENCES Department(department_id) -- Link to department
);

c. Department table 
CREATE TABLE Department (
    department_id INT AUTO_INCREMENT PRIMARY KEY,      -- Unique department identifier
    name VARCHAR(100) NOT NULL,                         -- Department name (e.g., "Cardiology")
    description TEXT                                    -- Department description
);

d. Appointment table
CREATE TABLE Appointment (
    appointment_id INT AUTO_INCREMENT PRIMARY KEY,      -- Unique appointment identifier
    patient_id INT,                                     -- Foreign key to Patient
    doctor_id INT,                                      -- Foreign key to Doctor
    appointment_date DATETIME NOT NULL,                 -- Date and time of the appointment
    status ENUM('Scheduled', 'Completed', 'Canceled') DEFAULT 'Scheduled', -- Appointment status
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,     -- Created timestamp
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP, -- Updated timestamp
    FOREIGN KEY (patient_id) REFERENCES Patient(patient_id), -- Link to Patient
    FOREIGN KEY (doctor_id) REFERENCES Doctor(doctor_id) -- Link to Doctor
);
e. medical table
CREATE TABLE MedicalRecord (
    record_id INT AUTO_INCREMENT PRIMARY KEY,           -- Unique record identifier
    patient_id INT,                                     -- Foreign key to Patient
    appointment_id INT,                                 -- Foreign key to Appointment
    diagnosis TEXT,                                     -- Diagnosis details
    treatment TEXT,                                     -- Treatment given
    prescription TEXT,                                  -- Prescription details
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,     -- Record creation time
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP, -- Record updated time
    FOREIGN KEY (patient_id) REFERENCES Patient(patient_id), -- Link to Patient
    FOREIGN KEY (appointment_id) REFERENCES Appointment(appointment_id) -- Link to Appointment
);

f. Bill table
CREATE TABLE Bill (
    bill_id INT AUTO_INCREMENT PRIMARY KEY,             -- Unique bill identifier
    patient_id INT,                                     -- Foreign key to Patient
    amount DECIMAL(10, 2) NOT NULL,                      -- Total amount for the bill
    bill_date DATETIME NOT NULL,                         -- Date the bill was generated
    payment_status ENUM('Pending', 'Paid', 'Overdue') DEFAULT 'Pending', -- Status of payment
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,      -- Created timestamp
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP, -- Updated timestamp
    FOREIGN KEY (patient_id) REFERENCES Patient(patient_id) -- Link to Patient
);

g.CREATE TABLE Prescription (
    prescription_id INT AUTO_INCREMENT PRIMARY KEY,     -- Unique prescription identifier
    record_id INT,                                      -- Foreign key to MedicalRecord
    medication_name VARCHAR(255) NOT NULL,               -- Name of the medication prescribed
    dosage VARCHAR(100),                                -- Dosage instructions
    frequency VARCHAR(100),                             -- Frequency of the medication
    duration VARCHAR(100),                              -- Duration for which the medication is prescribed
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,     -- Created timestamp
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP, -- Updated timestamp
    FOREIGN KEY (record_id) REFERENCES MedicalRecord(record_id) -- Link to Medical Record
);

h. CREATE TABLE Prescription (
    prescription_id INT AUTO_INCREMENT PRIMARY KEY,     -- Unique prescription identifier
    record_id INT,                                      -- Foreign key to MedicalRecord
    medication_name VARCHAR(255) NOT NULL,               -- Name of the medication prescribed
    dosage VARCHAR(100),                                -- Dosage instructions
    frequency VARCHAR(100),                             -- Frequency of the medication
    duration VARCHAR(100),                              -- Duration for which the medication is prescribed
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,     -- Created timestamp
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP, -- Updated timestamp
    FOREIGN KEY (record_id) REFERENCES MedicalRecord(record_id) -- Link to Medical Record
);

i. prscription table
CREATE TABLE Prescription (
    prescription_id INT AUTO_INCREMENT PRIMARY KEY,     -- Unique prescription identifier
    record_id INT,                                      -- Foreign key to MedicalRecord
    medication_name VARCHAR(255) NOT NULL,               -- Name of the medication prescribed
    dosage VARCHAR(100),                                -- Dosage instructions
    frequency VARCHAR(100),                             -- Frequency of the medication
    duration VARCHAR(100),                              -- Duration for which the medication is prescribed
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,     -- Created timestamp
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP, -- Updated timestamp
    FOREIGN KEY (record_id) REFERENCES MedicalRecord(record_id) -- Link to Medical Record
);

j.Optional Additional table
CREATE TABLE Staff (
    staff_id INT AUTO_INCREMENT PRIMARY KEY,            -- Unique staff identifier
    first_name VARCHAR(100) NOT NULL,                    -- First name
    last_name VARCHAR(100) NOT NULL,                     -- Last name
    role VARCHAR(50),                                    -- Role (e.g., Nurse, Receptionist)
    email VARCHAR(150) UNIQUE,                           -- Email (unique)
    phone VARCHAR(15),                                   -- Phone number
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,      -- Created timestamp
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP -- Updated timestamp
);
k. inventory table
CREATE TABLE Inventory (
    item_id INT AUTO_INCREMENT PRIMARY KEY,              -- Unique item identifier
    item_name VARCHAR(255) NOT NULL,                      -- Name of the inventory item
    quantity INT NOT NULL,                                -- Quantity in stock
    unit_price DECIMAL(10, 2),                            -- Price per unit
    reorder_level INT,                                    -- Minimum quantity before reorder
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,       -- Created timestamp
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP -- Updated timestamp
);


